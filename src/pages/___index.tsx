import React, { useEffect, useState } from "react";
import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { Authenticator, useAuthenticator } from "@aws-amplify/ui-react";
import {
  Amplify,
  API,
  Auth,
  withSSRContext,
  graphqlOperation,
} from "aws-amplify";

import { createProject, deleteProject } from "../graphql/mutations";
import { listProjects } from "../graphql/queries";
import "@aws-amplify/ui-react/styles.css"; // default theme
import { useRouter } from "next/router";
import styles from "../styles/Home.module.css";
import awsExports from "../aws-exports";
import {
  CreateProjectInput,
  DeleteProjectInput,
  ListProjectsQuery,
  Project,
} from "../API";
import * as subscriptions from "../graphql/subscriptions";

Amplify.configure(awsExports);

const initialState = { name: "", link: "" };
const Home: NextPage = ({ projects = [] }: { projects: Project[] }) => {
  const router = useRouter();
  const { user, signOut } = useAuthenticator((context) => [context.user]);
  const { authStatus } = useAuthenticator((context) => [context.authStatus]);

  let userGroup;

  useEffect(() => {
    fetchProjects();
  }, []);
  const [formState, setFormState] = useState(initialState);
  const [projectsState, setProjects] = useState([]);

  useEffect(() => {
    if (authStatus == "authenticated") {
      // the array of groups that the user belongs to
      const userAuth = user.getSignInUserSession();
      const acessToken = userAuth.getAccessToken();
      const payload = acessToken.payload;
      // userGroup = payload ? payload["cognito:groups"][0] : "guest";
    }
  }, [authStatus]);

  function setInput(key, value) {
    setFormState({ ...formState, [key]: value });
  }

  // async function fetchprojects() {
  //   try {
  //     const todoData = await API.graphql(graphqlOperation(listProjects))
  //     const projects = todoData.data.listprojects.items
  //     setProjects(projects)
  //   } catch (err) { console.log('error fetching projects') }
  // }

  async function fetchProjects() {
    try {
      const projectData = (await API.graphql(
        graphqlOperation(listProjects)
      )) as {
        data: Promise<ListProjectsQuery>;
        errors: any[];
      };
      const projects = (await projectData.data).listProjects.items;
      setProjects(projects);
      console.log(projectData);
    } catch (err) {
      console.log("error fetching projects");
    }
  }

  async function addProject() {
    try {
      if (!formState.name || !formState.link) return;
      const project = { ...formState };
      setProjects([...projects, project]);
      setFormState(initialState);
      (await API.graphql(
        graphqlOperation(createProject, { input: project })
      )) as Promise<CreateProjectInput>;
    } catch (err) {
      console.log("error creating project:", err);
    }
  }

  async function deleted(id) {
    try {
      console.log(id);
      console.log(projects);
      var array = projects; // make a separate copy of the array
      var index = array.indexOf(id);
      if (index !== -1) {
        array.splice(index, 1);
        setProjects(array);
      }
      const projectDetails = {
        id: id,
      };
      (await API.graphql(
        graphqlOperation(deleteProject, { input: projectDetails })
      )) as Promise<DeleteProjectInput>;
    } catch (err) {
      console.log("error deleting project:", err);
    }
  }
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {authStatus === "configuring" && "Loading..."}
      {authStatus !== "authenticated" ? (
        <Authenticator />
      ) : (
        <div className={styles.container}>
          <h1>Welcome {userGroup} </h1>
          <button className={styles.buttonPrimary} onClick={signOut}>
            Sign Out
          </button>
          <div className={styles.grid}>
            <input
              onChange={(event) => setInput("name", event.target.value)}
              className={styles.input}
              value={formState.name}
              placeholder="Enter title"
            />
            <input
              onChange={(event) => setInput("link", event.target.value)}
              className={styles.input}
              value={formState.link}
              placeholder="Enter link"
            />
            <button className={styles.buttonPrimary} onClick={addProject}>
              Create project
            </button>
          </div>

          <div className={styles.grid}>
            {projectsState.map((project, index) => (
              <div
                key={project.id ? project.id : index}
                className={styles.card}
              >
                <div onClick={() => router.push(`/project/${project.id}`)}>
                  <p>{project.name}</p>
                  <p>{project.link}</p>
                </div>
                <button
                  className={styles.buttonClose}
                  onClick={() => {
                    deleted(project.id);
                  }}
                >
                  X
                </button>
              </div>
            ))}
          </div>
        </div>
      )}
    </>
  );
};
export const getServerSideProps: GetServerSideProps = async ({ req }) => {
  const SSR = withSSRContext({ req });

  const response = (await SSR.API.graphql({ query: listProjects })) as {
    data: ListProjectsQuery;
  };

  return {
    props: {
      projects: response.data.listProjects.items,
    },
  };
};
export default Home;
